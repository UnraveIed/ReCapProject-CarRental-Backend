// <auto-generated />
using System;
using CarRental.DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.DataAccess.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20230410230550_FindexPoint")]
    partial class FindexPoint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2799),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2801),
                            Name = "Mercedes",
                            Note = "Mercedes Markası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2806),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2807),
                            Name = "BMV",
                            Note = "BMV Markası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2811),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2812),
                            Name = "Lamborghini",
                            Note = "Lamborghini Markası"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2815),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2816),
                            Name = "Ferrari",
                            Note = "Ferrari Markası"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2819),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2820),
                            Name = "Opel",
                            Note = "Opel Markası"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2824),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2825),
                            Name = "Peugeot",
                            Note = "Peugeot Markası"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2828),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2829),
                            Name = "Koenigsegg",
                            Note = "Koenigsegg Markası"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2832),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2833),
                            Name = "Aston Martin",
                            Note = "Aston Martin Markası"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2836),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2837),
                            Name = "Porsche",
                            Note = "Porsche Markası"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2841),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2841),
                            Name = "McLaren",
                            Note = "McLaren Markası"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2845),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(2845),
                            Name = "Ford",
                            Note = "Ford Markası"
                        });
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MinFindexPoint")
                        .HasColumnType("int");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            ColorId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9445),
                            DailyPrice = 950000.00m,
                            Description = "Iyi bir model 1",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1500,
                            ModelYear = (short)2020,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9447),
                            Note = "1. Araba"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            ColorId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9514),
                            DailyPrice = 850000.00m,
                            Description = "Iyi bir model 2",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1600,
                            ModelYear = (short)2018,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9515),
                            Note = "2. Araba"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            ColorId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9521),
                            DailyPrice = 1000000.00m,
                            Description = "Iyi bir model 3",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1750,
                            ModelYear = (short)2022,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9522),
                            Note = "3. Araba"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            ColorId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9526),
                            DailyPrice = 980000.00m,
                            Description = "Iyi bir model 4",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1200,
                            ModelYear = (short)2021,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9527),
                            Note = "4. Araba"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            ColorId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9534),
                            DailyPrice = 150000.00m,
                            Description = "Iyi bir model 5",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1100,
                            ModelYear = (short)2015,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9535),
                            Note = "5. Araba"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            ColorId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9540),
                            DailyPrice = 250000.00m,
                            Description = "Iyi bir model 6",
                            IsActive = true,
                            IsDeleted = false,
                            MinFindexPoint = 1150,
                            ModelYear = (short)2022,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(9541),
                            Note = "6. Araba"
                        });
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4795),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4796),
                            Name = "Sarı",
                            Note = "Sarı Rengi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4800),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4801),
                            Name = "Kırmızı",
                            Note = "Kırmızı Rengi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4805),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 844, DateTimeKind.Local).AddTicks(4806),
                            Name = "Mavi",
                            Note = "Mavi Rengi"
                        });
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FindexPoint")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "AE Yazılım",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(1021),
                            FindexPoint = 1750,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(1022),
                            Note = "1. Musteri",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Selçuk Üniversitesi",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(1027),
                            FindexPoint = 1000,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(1028),
                            Note = "2. Musteri",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(5233),
                            CustomerId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(5234),
                            Note = "Ilk kira",
                            RentDate = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ReturnDate = new DateTime(2023, 4, 16, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(5240),
                            CustomerId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(5241),
                            Note = "2. kira",
                            RentDate = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            ReturnDate = new DateTime(2023, 4, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8247),
                            Email = "batu@inal.com",
                            FirstName = "Batuhan",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "İnal",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8248),
                            Note = "User data seed",
                            PasswordHash = new byte[] { 158, 60, 12, 126, 18, 12, 77, 134, 30, 61, 53, 70, 199, 97, 178, 255, 122, 240, 227, 118, 2, 227, 231, 206, 198, 174, 46, 77, 8, 72, 105, 11, 67, 226, 96, 223, 26, 245, 189, 188, 249, 32, 156, 100, 168, 68, 224, 76, 146, 137, 45, 210, 184, 87, 143, 169, 17, 213, 108, 44, 145, 101, 86, 190 },
                            PasswordSalt = new byte[] { 220, 195, 246, 239, 20, 173, 168, 126, 105, 127, 79, 200, 199, 34, 255, 242, 57, 158, 238, 3, 68, 15, 39, 101, 55, 129, 108, 173, 110, 198, 220, 2, 67, 75, 22, 174, 66, 152, 230, 140, 187, 40, 76, 95, 13, 12, 12, 108, 177, 239, 212, 170, 156, 86, 31, 184, 47, 155, 109, 129, 112, 193, 22, 96, 194, 205, 157, 80, 28, 52, 114, 76, 160, 78, 131, 134, 170, 145, 146, 40, 36, 51, 31, 122, 228, 146, 121, 115, 97, 28, 41, 227, 221, 136, 186, 180, 221, 55, 214, 23, 156, 229, 32, 131, 221, 184, 76, 44, 33, 230, 199, 208, 167, 193, 243, 248, 167, 18, 186, 154, 228, 225, 121, 85, 227, 5, 25, 6 }
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8254),
                            Email = "samet@inal.com",
                            FirstName = "Samet",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "İnal",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8255),
                            Note = "User data seed",
                            PasswordHash = new byte[] { 158, 60, 12, 126, 18, 12, 77, 134, 30, 61, 53, 70, 199, 97, 178, 255, 122, 240, 227, 118, 2, 227, 231, 206, 198, 174, 46, 77, 8, 72, 105, 11, 67, 226, 96, 223, 26, 245, 189, 188, 249, 32, 156, 100, 168, 68, 224, 76, 146, 137, 45, 210, 184, 87, 143, 169, 17, 213, 108, 44, 145, 101, 86, 190 },
                            PasswordSalt = new byte[] { 220, 195, 246, 239, 20, 173, 168, 126, 105, 127, 79, 200, 199, 34, 255, 242, 57, 158, 238, 3, 68, 15, 39, 101, 55, 129, 108, 173, 110, 198, 220, 2, 67, 75, 22, 174, 66, 152, 230, 140, 187, 40, 76, 95, 13, 12, 12, 108, 177, 239, 212, 170, 156, 86, 31, 184, 47, 155, 109, 129, 112, 193, 22, 96, 194, 205, 157, 80, 28, 52, 114, 76, 160, 78, 131, 134, 170, 145, 146, 40, 36, 51, 31, 122, 228, 146, 121, 115, 97, 28, 41, 227, 221, 136, 186, 180, 221, 55, 214, 23, 156, 229, 32, 131, 221, 184, 76, 44, 33, 230, 199, 208, 167, 193, 243, 248, 167, 18, 186, 154, 228, 225, 121, 85, 227, 5, 25, 6 }
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8259),
                            Email = "ilknur@inal.com",
                            FirstName = "Ilknur",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "İnal",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 4, 11, 2, 5, 49, 845, DateTimeKind.Local).AddTicks(8260),
                            Note = "User data seed",
                            PasswordHash = new byte[] { 158, 60, 12, 126, 18, 12, 77, 134, 30, 61, 53, 70, 199, 97, 178, 255, 122, 240, 227, 118, 2, 227, 231, 206, 198, 174, 46, 77, 8, 72, 105, 11, 67, 226, 96, 223, 26, 245, 189, 188, 249, 32, 156, 100, 168, 68, 224, 76, 146, 137, 45, 210, 184, 87, 143, 169, 17, 213, 108, 44, 145, 101, 86, 190 },
                            PasswordSalt = new byte[] { 220, 195, 246, 239, 20, 173, 168, 126, 105, 127, 79, 200, 199, 34, 255, 242, 57, 158, 238, 3, 68, 15, 39, 101, 55, 129, 108, 173, 110, 198, 220, 2, 67, 75, 22, 174, 66, 152, 230, 140, 187, 40, 76, 95, 13, 12, 12, 108, 177, 239, 212, 170, 156, 86, 31, 184, 47, 155, 109, 129, 112, 193, 22, 96, 194, 205, 157, 80, 28, 52, 114, 76, 160, 78, 131, 134, 170, 145, 146, 40, 36, 51, 31, 122, 228, 146, 121, 115, 97, 28, 41, 227, 221, 136, 186, 180, 221, 55, 214, 23, 156, 229, 32, 131, 221, 184, 76, 44, 33, 230, 199, 208, 167, 193, 243, 248, 167, 18, 186, 154, 228, 225, 121, 85, 227, 5, 25, 6 }
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            OperationClaimId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Car", b =>
                {
                    b.HasOne("CarRental.Entities.Concrete.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Entities.Concrete.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.CarImage", b =>
                {
                    b.HasOne("CarRental.Entities.Concrete.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Rental", b =>
                {
                    b.HasOne("CarRental.Entities.Concrete.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Entities.Concrete.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Car", b =>
                {
                    b.Navigation("CarImages");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
